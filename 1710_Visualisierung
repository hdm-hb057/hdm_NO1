
# Edge- und Nodelist koppeln
  
  
# Gesamtnetzwerk dfb 

library(igraph)
# liest die Dateien direkt aus dem github-Verzeichnis ein
el <- read.csv("https://raw.githubusercontent.com/kh107/hdm_NO1/master/1710_Edgelist.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/kh107/hdm_NO1/master/1710_Nodelist.csv", header=T, as.is=T, sep = ",")
# prüft, ob alle Variablen eingelesen wurden
head(el)
head(nodes)
# wandelt die edgelist in eine Matrix um und baut das igraph-Objekt
hties <-as.matrix(el)
dfb <- graph_from_data_frame(d=hties, vertices=nodes, directed=F)
dfb
plot(dfb)

# EINFÄRBEN aufgrund von Vertex-Attributen

# Im Netzwerk sind Spieler, Engagement und Werbekooperationen abgelegt, die über das Vertex.Attribut $Type mit "1" (Spieler) oder "2" (Werbekooperationen) oder "3" (soziales Engagement) kodiert sind.
vertex.attributes(dfb)$Type

#Alle Spieler sollen nun mit der Farbe grün, alle Werbekooperationen mit der Farbe grau und soziales Engagement mit der Farbe blau visualisiert werden.

#FARBEN nach Vertex-Attributen definieren
faerbung <- c("green", "grey", "blue")

#definiert das Farbspektrum, der verwendeten Farben und legt diese in einem neuen Vector faerbung fest. Da wir wissen, dass wir bei §Type nur drei Werte haben (Spieler, Werbekooperationen, soziales Engagement) brauchen wir auch drei Werte. Die direkten Farbpaletten sind hier hinterlegt: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf.

V(dfb)$color <- faerbung[V(dfb)$Type]
# weist dem Vertex-Attribut color die Funktion faerbung zu, die wir vorher mit drei Farben definiert haben.
plot(dfb)

# KNOTEN/VERTEX-FORM ändern.
# Wie jedes andere Attribut lässt sich auch die Form des Knotens ändern. In diesem Fall wollen wir, dass alle Werbepartner und soziale Organisationen V(dfb)$Type als Quadrat dargestellt werden.

V(dfb)$shape = "square"
# definiert, dass alle Knoten als Quadrat auftreten

spieler <- V(dfb)[Type == "1"]
# wöhlt alle Knoten aus, die das Vertex-Attribut "1" bei $Type gesetzt haben

spieler

V(dfb)[spieler]$shape = "circle"
# weist allen Werten von spieler den Shape "circle" zu.

plot(dfb)
